"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _awaiting = require("awaiting");

var _develop = _interopRequireDefault(require("./compiler/develop"));

var _build = _interopRequireDefault(require("./compiler/build"));

var _webpack = _interopRequireDefault(require("./webpack"));

var _logger = _interopRequireDefault(require("@esops/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint no-console: 0 */
const standardEntries = ['index.js', 'entry.js', 'src/index.js', 'src/main.js', 'src/entry.js', 'app/index.js', 'app/main.js', 'app/entry.js'];

const DEFAULT_LOGO_PATH = _path.default.join(__dirname, '../template/icon.png');

const DEFAULT_HTML_PATH = _path.default.join(__dirname, '../template/index.html');

const defaultOpts = {
  entry: 'src/index.js',
  devMode: false,
  distFolder: './.esops/target/web/dist',
  assetsFolder: './assets',
  logoFile: 'logo.png',
  indexHtmlPath: DEFAULT_HTML_PATH,
  cwd: process.cwd(),
  port: 8000
};

const findInArray = (array, test) => array.reduce((acc, next) => test(next) ? [...acc, next] : acc, []);

const checkConfig = async config => {
  if (!_fs.default.existsSync(config.entryPath)) {
    console.error(new Error(`Can't locate an entry path. Attempted ${standardEntries.join(',')}`));
    process.exit(1);
  }

  try {
    await (0, _awaiting.callback)(_mkdirp.default, config.entryPath);
  } catch (err) {
    if (err && err.code !== 'EEXIST') console.error(err);
  } // Logging to user


  console.log(config.devMode ? 'starting dev environment...' : 'create production distribution...');
  console.log(`Using package ${config.entryFile}`);
};

const entryFileNotFoundTemplate = standardEntries => `# Entry file not found.

## Acceptable entries

* \`package.json\` \`main\` property
${standardEntries.map(entry => `* \`${entry}\`\n`).reduce((acc, next) => `${acc}${next}`, '')}
`; // opts expects config to be generated by `../config` file


var _default = async opts => {
  const optsWithDefaults = { ...defaultOpts,
    ...opts
  };
  const entriesFound = findInArray(standardEntries, entry => _fs.default.existsSync(_path.default.join(optsWithDefaults.cwd, entry)));
  const entryFile = entriesFound[0];

  if (!entryFile) {
    _logger.default.md(entryFileNotFoundTemplate(standardEntries));

    process.exit(1);
  }

  const entryPath = _path.default.join(optsWithDefaults.cwd, entryFile);

  const buildPath = _path.default.join(optsWithDefaults.cwd, optsWithDefaults.distFolder);

  const packageLogoPath = _path.default.join(optsWithDefaults.cwd, optsWithDefaults.assetsFolder, optsWithDefaults.logoFile);

  const logoPath = _fs.default.existsSync(packageLogoPath) ? packageLogoPath : DEFAULT_LOGO_PATH;
  const config = {
    entryFile,
    entryPath,
    buildPath,
    logoPath,
    ...optsWithDefaults
  };
  await checkConfig(config); // Create webpack compiler

  const webpackConfig = (0, _webpack.default)(config); // Run server

  if (config.devMode) return (0, _develop.default)(config, webpackConfig);else return (0, _build.default)(webpackConfig);
};

exports.default = _default;