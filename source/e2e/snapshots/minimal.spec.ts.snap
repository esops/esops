module.exports[`Describe esops() minimal features | Given a minimal package with no extra files: should generate basic template in cwd`] = `

[
  ".vscode",
  ".vscode/settings.json",
  "esops.json",
  "infrastructure",
  "infrastructure/.vscode",
  "infrastructure/.vscode/settings.json",
  "infrastructure/src",
  "infrastructure/src/stores",
  "infrastructure/src/stores/stores-architecture.md",
  "infrastructure/tsconfig.json",
  "src",
  "src/stores",
  "src/stores/stores-architecture.md",
  "tsconfig.json"
]`

module.exports[`Describe esops() minimal features | Given an included .gitignore: should have updated .gitignore with generated file paths`] = `


### ESOPS AUTO GENERATED BEGIN ###
/.vscode/settings.json
/src/stores/stores-architecture.md
/tsconfig.json
### ESOPS AUTO GENERATED END ###
`

module.exports[`Describe esops() minimal features | Given an included .npmignore: should have updated .npmignore with generated file paths`] = `

/src/**
### ESOPS AUTO GENERATED BEGIN ###
/.vscode/settings.json
/src/stores/stores-architecture.md
/tsconfig.json
### ESOPS AUTO GENERATED END ###
`

module.exports[`Describe esops() minimal features | Given a minimal package with package.json: should generate basic template in cwd`] = `

[
  ".gitignore",
  ".vscode",
  ".vscode/settings.json",
  "infrastructure",
  "infrastructure/.vscode",
  "infrastructure/.vscode/settings.json",
  "infrastructure/src",
  "infrastructure/src/stores",
  "infrastructure/src/stores/stores-architecture.md",
  "infrastructure/tsconfig.json",
  "package.json",
  "src",
  "src/stores",
  "src/stores/stores-architecture.md",
  "tsconfig.json"
]`

module.exports[`Describe esops() minimal features | Given an included .gitignore: should have updated .gitignore with generated paths`] = `


### ESOPS AUTO GENERATED BEGIN ###
/.vscode/settings.json
/src/stores/stores-architecture.md
/tsconfig.json
### ESOPS AUTO GENERATED END ###
`

module.exports[`Describe esops() minimal features | Given a minimal package.json: should have contents in package.json`] = `

{
  "name": "esops-test",
  "esops": [
    "./infrastructure"
  ]
}`

module.exports[`Describe esops() minimal features | Given minimal stack from node module: should generate basic template in cwd from node_module`] = `

[
  ".gitignore",
  ".vscode",
  ".vscode/settings.json",
  "infrastructure",
  "infrastructure/basic",
  "infrastructure/basic/.vscode",
  "infrastructure/basic/.vscode/settings.json",
  "infrastructure/basic/src",
  "infrastructure/basic/src/stores",
  "infrastructure/basic/src/stores/stores-architecture.md",
  "infrastructure/basic/tsconfig.json",
  "infrastructure/package.json",
  "node_modules",
  "node_modules/@test",
  "node_modules/@test/infrastructure",
  "node_modules/@test/infrastructure/basic",
  "node_modules/@test/infrastructure/basic/.vscode",
  "node_modules/@test/infrastructure/basic/.vscode/settings.json",
  "node_modules/@test/infrastructure/basic/src",
  "node_modules/@test/infrastructure/basic/src/stores",
  "node_modules/@test/infrastructure/basic/src/stores/stores-architecture.md",
  "node_modules/@test/infrastructure/basic/tsconfig.json",
  "node_modules/@test/infrastructure/package.json",
  "package-lock.json",
  "package.json",
  "src",
  "src/stores",
  "src/stores/stores-architecture.md",
  "tsconfig.json"
]`

module.exports[`Describe esops() minimal features | Given no config found: should provide a friendly message on how to use esops`] = `

Error: No stack config found.

## Current Working Directory

/current/working/directory/

 ••• 
## How To
Esops works by adding a valid stack config to \`esops.json\` or \`package.json\`.

A valid stack config will be a path to a directory you want to copy from.

### Configure esops in \`package.json\` or \`esops.json\`

#### in \`esops.json\`

\`\`\`json
"node:@myorg/my-stack/stack"
\`\`\`

#### in \`package.json\`

\`{ "esops": "node:@myorg/my-stack/stack" }\`

### Resolution Types

- _Filesystem:_ \`'./infrastructure'\`
- _Node Module:_ \`'node:@myorg/my-stack/stack'\`

### Run \`esops\`

If global, just run \`esops\`. If local, use \`npx esops\`. Files will be generated, and if you have a \`.gitignore\`, it will be updated to include the generated files.

`

module.exports[`Describe esops() minimal features | Given a bad path in the config: should throw a friendly error`] = `

TypeError: Path \`./infrastructure\` not found.

## Current Working Directory

/current/working/directory/

 ••• 
## How To
Esops works by adding a valid stack config to \`esops.json\` or \`package.json\`.

A valid stack config will be a path to a directory you want to copy from.

### Configure esops in \`package.json\` or \`esops.json\`

#### in \`esops.json\`

\`\`\`json
"node:@myorg/my-stack/stack"
\`\`\`

#### in \`package.json\`

\`{ "esops": "node:@myorg/my-stack/stack" }\`

### Resolution Types

- _Filesystem:_ \`'./infrastructure'\`
- _Node Module:_ \`'node:@myorg/my-stack/stack'\`

### Run \`esops\`

If global, just run \`esops\`. If local, use \`npx esops\`. Files will be generated, and if you have a \`.gitignore\`, it will be updated to include the generated files.

`

module.exports[`Describe esops() minimal features | Given an invalid config object: should throw a friendly error`] = `

TypeError: Your stack definition is invalid.
Please add a a valid stack config to \`esops.json\` or \`package.json\`.

A valid stack config will be a path to a directory you want to copy from.

 ••• 
## How To
Esops works by adding a valid stack config to \`esops.json\` or \`package.json\`.

A valid stack config will be a path to a directory you want to copy from.

### Configure esops in \`package.json\` or \`esops.json\`

#### in \`esops.json\`

\`\`\`json
"node:@myorg/my-stack/stack"
\`\`\`

#### in \`package.json\`

\`{ "esops": "node:@myorg/my-stack/stack" }\`

### Resolution Types

- _Filesystem:_ \`'./infrastructure'\`
- _Node Module:_ \`'node:@myorg/my-stack/stack'\`

### Run \`esops\`

If global, just run \`esops\`. If local, use \`npx esops\`. Files will be generated, and if you have a \`.gitignore\`, it will be updated to include the generated files.

`

module.exports[`Describe esops() minimal features | Given non parseable: should throw a friendly error`] = `

TypeError: Your stack definition is invalid.
Please add a a valid stack config to \`esops.json\` or \`package.json\`.

A valid stack config will be a path to a directory you want to copy from.

 ••• 
## How To
Esops works by adding a valid stack config to \`esops.json\` or \`package.json\`.

A valid stack config will be a path to a directory you want to copy from.

### Configure esops in \`package.json\` or \`esops.json\`

#### in \`esops.json\`

\`\`\`json
"node:@myorg/my-stack/stack"
\`\`\`

#### in \`package.json\`

\`{ "esops": "node:@myorg/my-stack/stack" }\`

### Resolution Types

- _Filesystem:_ \`'./infrastructure'\`
- _Node Module:_ \`'node:@myorg/my-stack/stack'\`

### Run \`esops\`

If global, just run \`esops\`. If local, use \`npx esops\`. Files will be generated, and if you have a \`.gitignore\`, it will be updated to include the generated files.

`

module.exports[`Describe esops() minimal features | Given no to override: should not override files`] = `

{
  "has-been-overwritten": false
}
`

module.exports[`Describe esops() minimal features | Given yes to override: should override files`] = `

{
  "has-been-overwritten": true
}
`

module.exports[`Describe esops() minimal features | Given canceling prompt to override: should not override files`] = `

{
  "has-been-overwritten": false
}
`

